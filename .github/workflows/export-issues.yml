name: Export Issues to Own Repo

on:
  workflow_dispatch:
    inputs:
      labels:
        description: "Comma-separated labels (optional). If empty, file will be named report_ALL.json"
        required: false
        default: ""
      source_path:
        description: "Source repo (owner/name) to read issues from"
        required: true
        default: ""
      source_repo:
        description: "Source repo (owner/name) to read issues from"
        required: true
        default: "https-multiculturaltoolbox-com/edge7"
      dest_repo:
        description: "Destination repo (owner/name)"
        required: true
        default: "pacuitinfo/edge43"
      dest_branch:
        description: "Destination branch"
        required: false
        default: "main"
      dest_path:
        description: "Path in destination repo for monthly-status.json (e.g., data/monthly-status.json or data/)"
        required: false
        default: "data/monthly-status.json"

      # Inputs for BigJsonReader (kept; adjust if needed)
      dateStart:
        description: "Source owner (where big JSON lives)"
        required: false
        default: ""
      dateEnd:
        description: "Source repo"
        required: false
        default: ""
      region:
        description: "Path to big JSON in source repo"
        required: false
        default: "VII"
      path:
        description: "Path to big JSON in source repo"
        required: true
        default: "cache/report_ALL.json"
      

jobs:
  export:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout current repo (for scripts / BigJsonReader code)
        uses: actions/checkout@v4

      - name: Ensure jq and gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y gh
          fi

      - name: Fetch issues from source repo (no 1000 limit)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.event.inputs.source_repo || github.repository }}
          STATE: ${{ 'open' }}
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          mkdir -p cache

          echo "REPO=${REPO}"
          echo "LABELS_IN=${LABELS_IN}"
          echo "REGION=${REGION}"

          QUERY="repo:${REPO} state:${STATE}"

          # Append labels to query
          if [ -n "${LABELS_IN}" ]; then
            QUERY="${QUERY} label:${LABELS_IN}"
          fi
          if [ -n "${REGION}" ]; then
            QUERY="${QUERY} label:${REGION}"
          fi
          echo "Search query: ${QUERY}"

          API_URL="https://api.github.com/repos/{REPO}/issues"
          echo "${API_URL}"
          per_page=100
          page=1
          all_items=()

          while :; do
            echo "Fetching page $page..."
            resp=$(curl -sSL \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "${API_URL}?q=$(jq -rn --arg q "$QUERY" '$q|@uri')&per_page=$per_page&page=$page")

            # Handle empty or null response
            if [ -z "$resp" ] || [ "$resp" = "null" ]; then
              echo "‚ö†Ô∏è Empty or null response received, stopping pagination."
              break
            fi

            # Detect rate limit
            if echo "$resp" | jq -e '.message? | contains("API rate limit exceeded")' >/dev/null 2>&1; then
              echo "üö´ GitHub API rate limit exceeded ‚Äî use GH_PAT with higher quota."
              exit 1
            fi

            # Safely count issues
            count=$(echo "$resp" | jq -r '.items | length // 0' 2>/dev/null || echo 0)
            echo "Page $page: $count issues"

            # Stop if no issues
            [ "$count" -eq 0 ] && break

            # Append page JSON to array
            all_items+=("$resp")

            # Print first issue title for quick debug
            first_title=$(echo "$resp" | jq -r '.items[0].title // empty')
            [ -n "$first_title" ] && echo "‚Üí $first_title"

            ((page++))
          done

          echo "üì¶ Finished fetching: ${#all_items[@]} pages total."

          # Safely flatten all pages, skip nulls, remove pull requests, map fields
          raw=$(printf '%s\n' "${all_items[@]}" | jq -s '
            map(select(type == "object" and .items != null))
            | map(.items)
            | add
            | map(select(.pull_request | not))
            | map({
                Number: .number,
                Title: .title,
                Body: (.body // ""),
                State: .state,
                Url: .html_url,
                Labels: (.labels | map(.name))
              })
          ')

          # Build safe filename
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          echo "Writing ${issuesJson}"

          printf '%s' "$raw" > "$issuesJson"

          echo "Preview first 3 issues:"
          jq '.[0:3]' "$issuesJson" || true

          [ -s "$issuesJson" ] || { echo "‚ùå No issues produced"; exit 1; }

      - name: Show preview
        shell: bash
        env:
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          echo "SAFE=${SAFE}"
          jq '.[0:3]' "${issuesJson}" || true

      - name: Checkout destination repo (for early copy, if you want the raw issues file there too)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.dest_repo }}
          ref: ${{  'main' }}
          path: dest
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Copy file into destination path (raw issues JSON)
        shell: bash
        env:
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          destFile="dest/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          echo "Copying ${issuesJson} ‚Üí ${destFile}"
          [ -f "${issuesJson}" ] || { echo "‚ùå Missing ${issuesJson}"; exit 1; }
          mkdir -p "$(dirname "$destFile")"
          cp "${issuesJson}" "${destFile}"

      - name: Commit & push (raw issues JSON)
        working-directory: dest
        env:
          DEST_BRANCH: ${{ github.event.inputs.dest_branch || 'main' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"

          git fetch origin "$DEST_BRANCH" || true
          git checkout -B "$DEST_BRANCH" "origin/$DEST_BRANCH"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: export issues (raw) [skip ci]"

          lease_sha="$(git rev-parse "origin/$DEST_BRANCH" || echo)"
          # correct --force-with-lease syntax
          git push --force-with-lease=refs/heads/$DEST_BRANCH:$lease_sha origin HEAD:$DEST_BRANCH

      - name: Run BigJsonReader
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPONAMEREFRESH: ${{secrets.REPONAMEREFRESH}}
          REPOOWNER: ${{secrets.REPOOWNER}}
          GH_REFRESH_PAT: ${{secrets.GH_REFRESH_PAT}}
          REPONAME: ${{secrets.REPONAME}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          # If BigJsonReader expects to read from a GitHub repo (NOT local file),
          # it will use the workflow_dispatch inputs below.
          DATE_PARTS=""
          [ -n "${DATE_START:-}" ] && DATE_PARTS="${DATE_START}"
          [ -n "${DATE_END:-}" ] && DATE_PARTS="${DATE_PARTS:+${DATE_PARTS}:}${DATE_END}"

          dotnet run --project src/Tools/BigJsonReader/BigJsonReader.csproj -- \
            --owner "${{ github.repository_owner }}" \
            --repo  "${{ github.repository  }}" \
            --path  "${{ github.repository_owner  }}" \
            --regionKey "report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}" \
            --ref   "${{ 'main'   }}" \
            --out "artifacts/monthly-status.json"

      - name: Checkout destination repo (final write)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.dest_repo }}
          ref: ${{  'main' }}
          path: dest
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Copy files into destination path (status + issues)
        shell: bash
        env:
          DEST_PATH: ${{ github.event.inputs.dest_path || 'data/monthly-status.json' }}
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"

          # 1) Place monthly-status.json exactly at DEST_PATH
          DEST1="dest/${DEST_PATH}"
          mkdir -p "$(dirname "$DEST1")"
          

          # 2) Place issues JSON alongside DEST_PATH
          if [[ "$DEST_PATH" == */ ]]; then
            issues_dest_dir="$DEST_PATH"
          else
            issues_dest_dir="$(dirname "$DEST_PATH")"
          fi
          DEST2="dest/${issues_dest_dir}/report:${DATE_START}:${DATE_END}:${REGION}"
          mkdir -p "$(dirname "$DEST2")"
          [ -f "$issuesJson" ] || { echo "‚ùå issues JSON missing: $issuesJson"; exit 1; }
          cp "$issuesJson" "$DEST2"

          echo "Wrote:"
          echo "  $DEST1"
          echo "  $DEST2"

      - name: Commit & push (final)
        working-directory: dest
        env:
          DEST_BRANCH: ${{ github.event.inputs.dest_branch || 'main' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"

          git fetch origin "$DEST_BRANCH" || true
          git checkout -B "$DEST_BRANCH" "origin/$DEST_BRANCH"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: export issues & monthly status [skip ci]"

          lease_sha="$(git rev-parse "origin/$DEST_BRANCH" || echo)"
          git push --force-with-lease=refs/heads/$DEST_BRANCH:$lease_sha origin HEAD:$DEST_BRANCH
