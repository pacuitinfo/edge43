name: Export Issues to Own Repo

on:
  workflow_dispatch:
    inputs:
      labels:
        description: "Comma-separated labels (optional). If empty, file will be named report_ALL.json"
        required: false
        default: ""
      source_path:
        description: "Source repo (owner/name) to read issues from"
        required: true
        default: ""
      source_repo:
        description: "Source repo (owner/name) to read issues from"
        required: true
        default: "https-multiculturaltoolbox-com/edge7"
      dest_repo:
        description: "Destination repo (owner/name)"
        required: true
        default: "pacuitinfo/edge43"
      dest_branch:
        description: "Destination branch"
        required: false
        default: "main"
      dest_path:
        description: "Path in destination repo for monthly-status.json (e.g., data/monthly-status.json or data/)"
        required: false
        default: "data/monthly-status.json"

      # Inputs for BigJsonReader (kept; adjust if needed)
      dateStart:
        description: "Source owner (where big JSON lives)"
        required: false
        default: ""
      dateEnd:
        description: "Source repo"
        required: false
        default: ""
      region:
        description: "Path to big JSON in source repo"
        required: false
        default: "VII"
      path:
        description: "Path to big JSON in source repo"
        required: true
        default: "cache/report_ALL.json"
      

jobs:
  export:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout current repo (for scripts / BigJsonReader code)
        uses: actions/checkout@v4

      - name: Ensure jq and gh
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y gh
          fi

      - name: Fetch ALL issues from source repo (GraphQL ‚Äî day-by-day, fixed JSON)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.event.inputs.source_repo || github.repository }}
          STATE: ${{ github.event.inputs.state || 'OPEN' }}
          DATE_START: ${{ github.event.inputs.dateStart || '2024-01-01' }}
          DATE_END: ${{ github.event.inputs.dateEnd || '' }}
        run: |
          set -euo pipefail
          mkdir -p cache

          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          NAME=$(echo "$REPO" | cut -d'/' -f2)
          API_URL="https://api.github.com/graphql"

          if [ -z "$DATE_END" ]; then
            DATE_END=$(date +%Y-%m-%d)
          fi

          current=$(date -d "$DATE_START" +%Y-%m-%d)
          end_date=$(date -d "$DATE_END" +%Y-%m-%d)

          echo "üîç Repo: $OWNER/$NAME"
          echo "üóìÔ∏è  Range: ${DATE_START} ‚Üí ${DATE_END}"

          while [ "$(date -d "$current" +%s)" -le "$(date -d "$end_date" +%s)" ]; do
            next_day=$(date -d "$current +1 day" +%Y-%m-%d)
            echo "üìÖ Fetching issues from ${current}..${next_day}"

            afterCursor=null
            hasNextPage=true
            page=1
            > "cache/page_${current}.jsonl"

            while [ "$hasNextPage" = true ]; do
              # Use jq to build a valid single-line JSON payload
              QUERY=$(jq -cn --arg owner "$OWNER" --arg name "$NAME" --arg after "$afterCursor" --arg since "${current}T00:00:00Z" --arg until "${next_day}T00:00:00Z" --arg state "$STATE" '
                {
                  query: "query($owner:String!, $name:String!, $after:String, $since:DateTime, $until:DateTime, $state:IssueState!) { repository(owner:$owner, name:$name) { issues(first:100, after:$after, states:[$state], filterBy:{since:$since, until:$until}) { nodes { number title body state url createdAt updatedAt labels(first:10){nodes{name}} } pageInfo { hasNextPage endCursor } } } }",
                  variables: {
                    owner: $owner,
                    name: $name,
                    after: ($after | select(. != "null")),
                    since: $since,
                    until: $until,
                    state: $state
                  }
                }')

              RESP=$(curl -sSL \
                -H "Authorization: bearer $GH_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$QUERY" \
                "$API_URL")

              if echo "$RESP" | jq -e '.errors' >/dev/null 2>&1; then
                echo "üö´ GraphQL error:"
                echo "$RESP" | jq '.errors'
                exit 1
              fi

              COUNT=$(echo "$RESP" | jq '.data.repository.issues.nodes | length')
              echo "  ‚Üí Page $page: $COUNT issues"
              echo "$RESP" >> "cache/page_${current}.jsonl"

              afterCursor=$(echo "$RESP" | jq -r '.data.repository.issues.pageInfo.endCursor')
              hasNextPage=$(echo "$RESP" | jq -r '.data.repository.issues.pageInfo.hasNextPage')
              [ "$hasNextPage" = "true" ] || break
              ((page++))
            done

            jq -s '
              map(.data.repository.issues.nodes)
              | add
              | map({
                  Number: .number,
                  Title: .title,
                  Body: (.body // ""),
                  State: .state,
                  Url: .url,
                  CreatedAt: .createdAt,
                  UpdatedAt: .updatedAt,
                  Labels: (.labels.nodes | map(.name))
                })
            ' "cache/page_${current}.jsonl" > "cache/issues_${current}.json"

            echo "‚úÖ ${current}: $(jq length "cache/issues_${current}.json") issues saved."

            current=$next_day
          done

          echo "üß© Combining all daily JSON files..."
          jq -s 'add' cache/issues_*.json > cache/all_issues.json
          echo "Preview:"
          jq '.[0:3]' cache/all_issues.json || true




      - name: Show preview
        shell: bash
        env:
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          echo "SAFE=${SAFE}"
          jq '.[0:3]' "${issuesJson}" || true

      - name: Checkout destination repo (for early copy, if you want the raw issues file there too)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.dest_repo }}
          ref: ${{  'main' }}
          path: dest
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Copy file into destination path (raw issues JSON)
        shell: bash
        env:
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          destFile="dest/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"
          echo "Copying ${issuesJson} ‚Üí ${destFile}"
          [ -f "${issuesJson}" ] || { echo "‚ùå Missing ${issuesJson}"; exit 1; }
          mkdir -p "$(dirname "$destFile")"
          cp "${issuesJson}" "${destFile}"

      - name: Commit & push (raw issues JSON)
        working-directory: dest
        env:
          DEST_BRANCH: ${{ github.event.inputs.dest_branch || 'main' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"

          git fetch origin "$DEST_BRANCH" || true
          git checkout -B "$DEST_BRANCH" "origin/$DEST_BRANCH"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: export issues (raw) [skip ci]"

          lease_sha="$(git rev-parse "origin/$DEST_BRANCH" || echo)"
          # correct --force-with-lease syntax
          git push --force-with-lease=refs/heads/$DEST_BRANCH:$lease_sha origin HEAD:$DEST_BRANCH

      - name: Run BigJsonReader
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPONAMEREFRESH: ${{secrets.REPONAMEREFRESH}}
          REPOOWNER: ${{secrets.REPOOWNER}}
          GH_REFRESH_PAT: ${{secrets.GH_REFRESH_PAT}}
          REPONAME: ${{secrets.REPONAME}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          # If BigJsonReader expects to read from a GitHub repo (NOT local file),
          # it will use the workflow_dispatch inputs below.
          DATE_PARTS=""
          [ -n "${DATE_START:-}" ] && DATE_PARTS="${DATE_START}"
          [ -n "${DATE_END:-}" ] && DATE_PARTS="${DATE_PARTS:+${DATE_PARTS}:}${DATE_END}"

          dotnet run --project src/Tools/BigJsonReader/BigJsonReader.csproj -- \
            --owner "${{ github.repository_owner }}" \
            --repo  "${{ github.repository  }}" \
            --path  "${{ github.repository_owner  }}" \
            --regionKey "report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}" \
            --ref   "${{ 'main'   }}" \
            --out "artifacts/monthly-status.json"

      - name: Checkout destination repo (final write)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.dest_repo }}
          ref: ${{  'main' }}
          path: dest
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Copy files into destination path (status + issues)
        shell: bash
        env:
          DEST_PATH: ${{ github.event.inputs.dest_path || 'data/monthly-status.json' }}
          LABELS_IN: ${{ github.event.inputs.labels || '' }}
          DATE_START: ${{ github.event.inputs.dateStart }}
          DATE_END: ${{ github.event.inputs.dateEnd }}
          REGION: ${{ github.event.inputs.region }}
        run: |
          set -euo pipefail
          SAFE=$(printf '%s' "${LABELS_IN}" | tr ' ,/' '_' | tr -cd 'A-Za-z0-9._-')
          SAFE=${SAFE:-ALL}
          issuesJson="cache/report:${DATE_START:+${DATE_START}:}${DATE_END:+${DATE_END}:}${REGION}"

          # 1) Place monthly-status.json exactly at DEST_PATH
          DEST1="dest/${DEST_PATH}"
          mkdir -p "$(dirname "$DEST1")"
          

          # 2) Place issues JSON alongside DEST_PATH
          if [[ "$DEST_PATH" == */ ]]; then
            issues_dest_dir="$DEST_PATH"
          else
            issues_dest_dir="$(dirname "$DEST_PATH")"
          fi
          DEST2="dest/${issues_dest_dir}/report:${DATE_START}:${DATE_END}:${REGION}"
          mkdir -p "$(dirname "$DEST2")"
          [ -f "$issuesJson" ] || { echo "‚ùå issues JSON missing: $issuesJson"; exit 1; }
          cp "$issuesJson" "$DEST2"

          echo "Wrote:"
          echo "  $DEST1"
          echo "  $DEST2"

      - name: Commit & push (final)
        working-directory: dest
        env:
          DEST_BRANCH: ${{ github.event.inputs.dest_branch || 'main' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "actions@users.noreply.github.com"

          git fetch origin "$DEST_BRANCH" || true
          git checkout -B "$DEST_BRANCH" "origin/$DEST_BRANCH"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: export issues & monthly status [skip ci]"

          lease_sha="$(git rev-parse "origin/$DEST_BRANCH" || echo)"
          git push --force-with-lease=refs/heads/$DEST_BRANCH:$lease_sha origin HEAD:$DEST_BRANCH
